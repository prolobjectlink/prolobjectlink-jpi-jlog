Comparing source compatibility of C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jlog\target\prolobjectlink-jpi-jlog-1.1.jar against C:\Users\Jose Zalacain\.m2\repository\io\github\prolobjectlink\prolobjectlink-jpi-jlog\1.0\prolobjectlink-jpi-jlog-1.0.jar
***  MODIFIED CLASS: PUBLIC io.github.prolobjectlink.prolog.jlog.JLog  (not serializable)
	===  CLASS FILE FORMAT VERSION: 50.0 <- 50.0
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologProvider
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologMapper
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologParser
	===  UNCHANGED SUPERCLASS: io.github.prolobjectlink.prolog.AbstractProvider (<- io.github.prolobjectlink.prolog.AbstractProvider)
	===  UNCHANGED FIELD: PROTECTED STATIC FINAL java.util.Map FUNCTORS
	***  MODIFIED CONSTRUCTOR: PUBLIC (<- PACKAGE_PROTECTED) JLog(io.github.prolobjectlink.prolog.PrologConverter)
	===  UNCHANGED CONSTRUCTOR: PUBLIC JLog()
	===  UNCHANGED METHOD: PUBLIC boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm falseReference()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologJavaConverter getJavaConverter()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologLogger getLogger()
	===  UNCHANGED METHOD: PUBLIC int hashCode()
	---  REMOVED METHOD: PUBLIC(-) boolean isCompliant()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologAtom newAtom(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologDouble newDouble(java.lang.Number)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologEngine newEngine()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologEngine newEngine(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.PrologTerm newEntry(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm)
	+++  NEW METHOD: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.PrologTerm newEntry(java.lang.Object, java.lang.Object)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologFloat newFloat(java.lang.Number)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologInteger newInteger(java.lang.Number)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologList newList()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologList newList(io.github.prolobjectlink.prolog.PrologTerm[])
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologList newList(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologList newList(io.github.prolobjectlink.prolog.PrologTerm[], io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologLong newLong(java.lang.Number)
	+++  NEW METHOD: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.PrologTerm newMap(java.util.Map)
	+++  NEW METHOD: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.PrologTerm newMap(int)
	+++  NEW METHOD: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.PrologTerm newMap()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm newReference(java.lang.Object)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologStructure newStructure(java.lang.String, io.github.prolobjectlink.prolog.PrologTerm[])
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm newStructure(io.github.prolobjectlink.prolog.PrologTerm, java.lang.String, io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologVariable newVariable(int)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologVariable newVariable(java.lang.String, int)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm nullReference()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm parseTerm(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm[] parseTerms(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologCut()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologEmpty()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologFail()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologFalse()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologInclude(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologNil()
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm prologTrue()
	===  UNCHANGED METHOD: PUBLIC java.lang.String toString()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm trueReference()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm voidReference()
===  UNCHANGED CLASS: PUBLIC io.github.prolobjectlink.prolog.jlog.JLogConsole  (not serializable)
	===  CLASS FILE FORMAT VERSION: 50.0 <- 50.0
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologConsole
	===  UNCHANGED SUPERCLASS: io.github.prolobjectlink.prolog.AbstractConsole (<- io.github.prolobjectlink.prolog.AbstractConsole)
	===  UNCHANGED CONSTRUCTOR: PUBLIC JLogConsole()
	===  UNCHANGED METHOD: PUBLIC STATIC void main(java.lang.String[])
***  MODIFIED CLASS: PUBLIC io.github.prolobjectlink.prolog.jlog.JLogEngine  (not serializable)
	===  CLASS FILE FORMAT VERSION: 50.0 <- 50.0
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologEngine
	===  UNCHANGED INTERFACE: java.lang.Iterable
	===  UNCHANGED SUPERCLASS: io.github.prolobjectlink.prolog.AbstractEngine (<- io.github.prolobjectlink.prolog.AbstractEngine)
	===  UNCHANGED CONSTRUCTOR: PROTECTED JLogEngine(io.github.prolobjectlink.prolog.PrologProvider)
	===  UNCHANGED METHOD: PUBLIC void abolish(java.lang.String, int)
	===  UNCHANGED METHOD: PUBLIC void asserta(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC void asserta(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm[])
	+++  NEW METHOD: PUBLIC(+) void asserta(io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC void assertz(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC void assertz(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm[])
	+++  NEW METHOD: PUBLIC(+) void assertz(io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC boolean clause(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC boolean clause(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm[])
	+++  NEW METHOD: PUBLIC(+) boolean clause(io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC void consult(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC void consult(java.io.Reader)
	===  UNCHANGED METHOD: PUBLIC boolean currentOperator(int, java.lang.String, java.lang.String)
	===  UNCHANGED METHOD: PUBLIC java.util.Set currentOperators()
	===  UNCHANGED METHOD: PUBLIC boolean currentPredicate(java.lang.String, int)
	===  UNCHANGED METHOD: PUBLIC void dispose()
	===  UNCHANGED METHOD: PUBLIC boolean equals(java.lang.Object)
	===  UNCHANGED METHOD: PUBLIC java.util.Set getBuiltIns()
	===  UNCHANGED METHOD: PUBLIC java.lang.String getLicense()
	===  UNCHANGED METHOD: PUBLIC java.lang.String getName()
	===  UNCHANGED METHOD: PUBLIC java.util.Set getPredicates()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologProgram getProgram()
	===  UNCHANGED METHOD: PUBLIC int getProgramSize()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getVendor()
	===  UNCHANGED METHOD: PUBLIC java.lang.String getVersion()
	===  UNCHANGED METHOD: PUBLIC int hashCode()
	===  UNCHANGED METHOD: PUBLIC void include(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC void include(java.io.Reader)
	===  UNCHANGED METHOD: PUBLIC java.util.Iterator iterator()
	===  UNCHANGED METHOD: PUBLIC void operator(int, java.lang.String, java.lang.String)
	===  UNCHANGED METHOD: PUBLIC void persist(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologQuery query(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologQuery query(io.github.prolobjectlink.prolog.PrologTerm[])
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologQuery query(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm[])
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologQuery query(io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC void retract(java.lang.String)
	===  UNCHANGED METHOD: PUBLIC void retract(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm[])
	+++  NEW METHOD: PUBLIC(+) void retract(io.github.prolobjectlink.prolog.PrologTerm)
	===  UNCHANGED METHOD: PUBLIC FINAL java.util.List verify()
+++* NEW CLASS: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.jlog.JLogEntry  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 50.0 <- n.a.
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologEntry
	+++  NEW INTERFACE: java.util.Map$Entry
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologElement
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologTerm
	+++  NEW SUPERCLASS: io.github.prolobjectlink.prolog.jlog.JLogTerm
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm[] getArguments()
	+++  NEW METHOD: PUBLIC(+) int getArity()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getFunctor()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getKey()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getTerm()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getValue()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isCompound()
	+++  NEW METHOD: PUBLIC(+) boolean isEvaluable()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm setValue(io.github.prolobjectlink.prolog.PrologTerm)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++* NEW CLASS: PUBLIC(+) FINAL(+) io.github.prolobjectlink.prolog.jlog.JLogMap  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 50.0 <- n.a.
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologList
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologMap
	+++  NEW INTERFACE: java.util.Map
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologElement
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologTerm
	+++  NEW INTERFACE: java.lang.Iterable
	+++  NEW SUPERCLASS: io.github.prolobjectlink.prolog.jlog.JLogTerm
	+++  NEW METHOD: PUBLIC(+) void clear()
	+++  NEW METHOD: PUBLIC(+) boolean contains(java.util.Map$Entry)
	+++  NEW METHOD: PUBLIC(+) boolean containsKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) boolean containsValue(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.util.Set entrySet()
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm get(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getArgument(int)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm[] getArguments()
	+++  NEW METHOD: PUBLIC(+) int getArity()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getFunctor()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getHead()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getTail()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getTerm()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isCompound()
	+++  NEW METHOD: PUBLIC(+) boolean isEmpty()
	+++  NEW METHOD: PUBLIC(+) boolean isEvaluable()
	+++  NEW METHOD: PUBLIC(+) java.util.Iterator iterator()
	+++  NEW METHOD: PUBLIC(+) java.util.Set keySet()
	+++  NEW METHOD: PUBLIC(+) void put(java.util.Map$Entry)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm put(io.github.prolobjectlink.prolog.PrologTerm, io.github.prolobjectlink.prolog.PrologTerm)
	+++  NEW METHOD: PUBLIC(+) void putAll(java.util.Collection)
	+++  NEW METHOD: PUBLIC(+) void putAll(java.util.Map)
	+++  NEW METHOD: PUBLIC(+) void remove(java.util.Map$Entry)
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm remove(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) int size()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
	+++  NEW METHOD: PUBLIC(+) java.util.Collection values()
+++* NEW CLASS: PUBLIC(+) io.github.prolobjectlink.prolog.jlog.JLogReference  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 50.0 <- n.a.
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologElement
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologTerm
	+++  NEW INTERFACE: io.github.prolobjectlink.prolog.PrologReference
	+++  NEW SUPERCLASS: io.github.prolobjectlink.prolog.jlog.JLogTerm
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm[] getArguments()
	+++  NEW METHOD: PUBLIC(+) int getArity()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getFunctor()
	+++  NEW METHOD: PUBLIC(+) java.lang.Object getObject()
	+++  NEW METHOD: PUBLIC(+) java.lang.Class getReferenceType()
	+++  NEW METHOD: PUBLIC(+) io.github.prolobjectlink.prolog.PrologTerm getTerm()
===  UNCHANGED CLASS: PUBLIC FINAL io.github.prolobjectlink.prolog.jlog.JLogScriptFactory  (not serializable)
	===  CLASS FILE FORMAT VERSION: 50.0 <- 50.0
	===  UNCHANGED INTERFACE: javax.script.ScriptEngineFactory
	===  UNCHANGED SUPERCLASS: io.github.prolobjectlink.prolog.PrologScriptEngineFactory (<- io.github.prolobjectlink.prolog.PrologScriptEngineFactory)
	===  UNCHANGED CONSTRUCTOR: PUBLIC JLogScriptFactory()
	===  UNCHANGED METHOD: PUBLIC java.lang.String getMethodCallSyntax(java.lang.String, java.lang.String, java.lang.String[])
***  MODIFIED CLASS: PUBLIC (<- PACKAGE_PROTECTED) io.github.prolobjectlink.prolog.jlog.JLogVariable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 50.0 <- 50.0
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologVariable
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologElement
	===  UNCHANGED INTERFACE: java.lang.Comparable
	===  UNCHANGED INTERFACE: io.github.prolobjectlink.prolog.PrologTerm
	===  UNCHANGED SUPERCLASS: io.github.prolobjectlink.prolog.jlog.JLogTerm (<- io.github.prolobjectlink.prolog.jlog.JLogTerm)
	***  MODIFIED CONSTRUCTOR: PROTECTED (<- PACKAGE_PROTECTED) JLogVariable(io.github.prolobjectlink.prolog.PrologProvider, java.lang.String)
	***  MODIFIED CONSTRUCTOR: PROTECTED (<- PACKAGE_PROTECTED) JLogVariable(io.github.prolobjectlink.prolog.PrologProvider)
	+++  NEW CONSTRUCTOR: PROTECTED(+) JLogVariable(int, io.github.prolobjectlink.prolog.PrologProvider)
	+++  NEW CONSTRUCTOR: PROTECTED(+) JLogVariable(int, io.github.prolobjectlink.prolog.PrologProvider, ubc.cs.JLog.Terms.jTerm)
	+++  NEW CONSTRUCTOR: PROTECTED(+) JLogVariable(int, io.github.prolobjectlink.prolog.PrologProvider, java.lang.String)
	===  UNCHANGED METHOD: PUBLIC io.github.prolobjectlink.prolog.PrologTerm[] getArguments()
	===  UNCHANGED METHOD: PUBLIC int getArity()
	===  UNCHANGED METHOD: PUBLIC java.lang.String getFunctor()
	---  REMOVED METHOD: PUBLIC(-) java.lang.String getIndicator()
	===  UNCHANGED METHOD: PUBLIC java.lang.String getName()
	===  UNCHANGED METHOD: PUBLIC int getPosition()
	---  REMOVED METHOD: PUBLIC(-) boolean hasIndicator(java.lang.String, int)
	===  UNCHANGED METHOD: PUBLIC boolean isAnonymous()
	===  UNCHANGED METHOD: PUBLIC void setName(java.lang.String)
